// Hey, listen! Don't edit these files!
// They're auto-generated by mockery. Go look in the
// README under the Mocks section for more info.

// Code generated by mockery v2.36.0. DO NOT EDIT.

package data

import mock "github.com/stretchr/testify/mock"

// MockPermissions is an autogenerated mock type for the Permissions type
type MockPermissions struct {
	mock.Mock
}

type MockPermissions_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPermissions) EXPECT() *MockPermissions_Expecter {
	return &MockPermissions_Expecter{mock: &_m.Mock}
}

// GetAllForUser provides a mock function with given fields: userID
func (_m *MockPermissions) GetAllForUser(userID int64) (UserPermissions, error) {
	ret := _m.Called(userID)

	var r0 UserPermissions
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (UserPermissions, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int64) UserPermissions); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(UserPermissions)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPermissions_GetAllForUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllForUser'
type MockPermissions_GetAllForUser_Call struct {
	*mock.Call
}

// GetAllForUser is a helper method to define mock.On call
//   - userID int64
func (_e *MockPermissions_Expecter) GetAllForUser(userID interface{}) *MockPermissions_GetAllForUser_Call {
	return &MockPermissions_GetAllForUser_Call{Call: _e.mock.On("GetAllForUser", userID)}
}

func (_c *MockPermissions_GetAllForUser_Call) Run(run func(userID int64)) *MockPermissions_GetAllForUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockPermissions_GetAllForUser_Call) Return(_a0 UserPermissions, _a1 error) *MockPermissions_GetAllForUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPermissions_GetAllForUser_Call) RunAndReturn(run func(int64) (UserPermissions, error)) *MockPermissions_GetAllForUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPermissions creates a new instance of MockPermissions. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPermissions(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPermissions {
	mock := &MockPermissions{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
