// Hey, listen! Don't edit these files!
// They're auto-generated by mockery. Go look in the
// README under the Mocks section for more info.

// Code generated by mockery v2.36.0. DO NOT EDIT.

package data

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockTokens is an autogenerated mock type for the Tokens type
type MockTokens struct {
	mock.Mock
}

type MockTokens_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTokens) EXPECT() *MockTokens_Expecter {
	return &MockTokens_Expecter{mock: &_m.Mock}
}

// DeleteAllForUser provides a mock function with given fields: scope, userID
func (_m *MockTokens) DeleteAllForUser(scope string, userID int64) error {
	ret := _m.Called(scope, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int64) error); ok {
		r0 = rf(scope, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTokens_DeleteAllForUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllForUser'
type MockTokens_DeleteAllForUser_Call struct {
	*mock.Call
}

// DeleteAllForUser is a helper method to define mock.On call
//   - scope string
//   - userID int64
func (_e *MockTokens_Expecter) DeleteAllForUser(scope interface{}, userID interface{}) *MockTokens_DeleteAllForUser_Call {
	return &MockTokens_DeleteAllForUser_Call{Call: _e.mock.On("DeleteAllForUser", scope, userID)}
}

func (_c *MockTokens_DeleteAllForUser_Call) Run(run func(scope string, userID int64)) *MockTokens_DeleteAllForUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int64))
	})
	return _c
}

func (_c *MockTokens_DeleteAllForUser_Call) Return(_a0 error) *MockTokens_DeleteAllForUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTokens_DeleteAllForUser_Call) RunAndReturn(run func(string, int64) error) *MockTokens_DeleteAllForUser_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function with given fields: token
func (_m *MockTokens) Insert(token *Token) error {
	ret := _m.Called(token)

	var r0 error
	if rf, ok := ret.Get(0).(func(*Token) error); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTokens_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type MockTokens_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - token *Token
func (_e *MockTokens_Expecter) Insert(token interface{}) *MockTokens_Insert_Call {
	return &MockTokens_Insert_Call{Call: _e.mock.On("Insert", token)}
}

func (_c *MockTokens_Insert_Call) Run(run func(token *Token)) *MockTokens_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Token))
	})
	return _c
}

func (_c *MockTokens_Insert_Call) Return(_a0 error) *MockTokens_Insert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTokens_Insert_Call) RunAndReturn(run func(*Token) error) *MockTokens_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// New provides a mock function with given fields: userID, ttl, scope
func (_m *MockTokens) New(userID int64, ttl time.Duration, scope string) (*Token, error) {
	ret := _m.Called(userID, ttl, scope)

	var r0 *Token
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, time.Duration, string) (*Token, error)); ok {
		return rf(userID, ttl, scope)
	}
	if rf, ok := ret.Get(0).(func(int64, time.Duration, string) *Token); ok {
		r0 = rf(userID, ttl, scope)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Token)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, time.Duration, string) error); ok {
		r1 = rf(userID, ttl, scope)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokens_New_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'New'
type MockTokens_New_Call struct {
	*mock.Call
}

// New is a helper method to define mock.On call
//   - userID int64
//   - ttl time.Duration
//   - scope string
func (_e *MockTokens_Expecter) New(userID interface{}, ttl interface{}, scope interface{}) *MockTokens_New_Call {
	return &MockTokens_New_Call{Call: _e.mock.On("New", userID, ttl, scope)}
}

func (_c *MockTokens_New_Call) Run(run func(userID int64, ttl time.Duration, scope string)) *MockTokens_New_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(time.Duration), args[2].(string))
	})
	return _c
}

func (_c *MockTokens_New_Call) Return(_a0 *Token, _a1 error) *MockTokens_New_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokens_New_Call) RunAndReturn(run func(int64, time.Duration, string) (*Token, error)) *MockTokens_New_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTokens creates a new instance of MockTokens. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTokens(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTokens {
	mock := &MockTokens{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
